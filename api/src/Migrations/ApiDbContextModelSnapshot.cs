// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScienceBasedMealsApi.Models;

#nullable disable

namespace ScienceBasedMealsApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ActivityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ActivityLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Little or no exercise",
                            Name = "Sedentary"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Light exercise/sports 1-3 days/week",
                            Name = "Light"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Moderate exercise/sports 3-5 days/week",
                            Name = "Moderate"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Hard exercise/sports 6-7 days/week",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Very hard exercise/sports & physical job or training twice per day",
                            Name = "Very Active"
                        });
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.DietaryPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DietaryPreferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Male gender",
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Female gender",
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Other gender identity",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Goal to lose weight",
                            Name = "Weight Loss"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Goal to maintain current weight",
                            Name = "Maintenance"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Goal to gain muscle mass",
                            Name = "Muscle Gain"
                        });
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UnitId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientDietaryPreference", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("DietaryPreferenceId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "DietaryPreferenceId");

                    b.HasIndex("DietaryPreferenceId");

                    b.ToTable("IngredientDietaryPreferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientNutrient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("NutrientId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("IngredientId", "NutrientId");

                    b.HasIndex("NutrientId");

                    b.ToTable("IngredientNutrients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientResearchReference", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("IngredientResearchReferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Critique")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MealVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewerUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealVersionId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("MealApprovals");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MealVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealVersionId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "ParentCommentId");

                    b.ToTable("MealComments");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MealVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("MealLikes");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("MealVersions");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersionIngredient", b =>
                {
                    b.Property<int>("MealVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("MealVersionId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("UnitId");

                    b.ToTable("MealVersionIngredients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersionResearchReference", b =>
                {
                    b.Property<int>("MealVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.HasKey("MealVersionId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("MealVersionResearchReferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Nutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DailyValue")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Nutrients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ResearchReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Doi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Journal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResearchReferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ResearchReferenceAuthor", b =>
                {
                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorOrder")
                        .HasColumnType("integer");

                    b.HasKey("ReferenceId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("ResearchReferenceAuthors");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ConversionToBaseUnit")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<int>("GoalId")
                        .HasColumnType("integer");

                    b.Property<decimal>("HeightCm")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("WeightKg")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLevelId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("GoalId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserConnection", b =>
                {
                    b.Property<int>("FollowerUserId")
                        .HasColumnType("integer");

                    b.Property<int>("FollowedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ConnectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FollowerUserId", "FollowedUserId");

                    b.HasIndex("FollowedUserId");

                    b.ToTable("UserConnections", t =>
                        {
                            t.HasCheckConstraint("CK_UserConnection_SelfFollow", "\"FollowerUserId\" <> \"FollowedUserId\"");
                        });
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserDietaryPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("DietaryPreferenceId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "DietaryPreferenceId");

                    b.HasIndex("DietaryPreferenceId");

                    b.ToTable("UserDietaryPreferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserMeal", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("MealId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("SavedMeals");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Ingredient", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Unit", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientDietaryPreference", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.DietaryPreference", "DietaryPreference")
                        .WithMany("IngredientDietaryPreferences")
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Ingredient", "Ingredient")
                        .WithMany("DietaryPreferences")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryPreference");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientNutrient", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Ingredient", "Ingredient")
                        .WithMany("Nutrients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Nutrient", "Nutrient")
                        .WithMany("IngredientNutrients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.IngredientResearchReference", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Ingredient", "Ingredient")
                        .WithMany("ResearchReferences")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.ResearchReference", "ResearchReference")
                        .WithMany("IngredientResearchReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("ResearchReference");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealApproval", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.MealVersion", "MealVersion")
                        .WithMany()
                        .HasForeignKey("MealVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "ReviewerUser")
                        .WithMany("MealApprovals")
                        .HasForeignKey("ReviewerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealVersion");

                    b.Navigation("ReviewerUser");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealComment", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.MealVersion", "MealVersion")
                        .WithMany()
                        .HasForeignKey("MealVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.MealComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("ScienceBasedMealsApi.Models.User", "User")
                        .WithMany("MealComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealVersion");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealLike", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.MealVersion", "MealVersion")
                        .WithMany()
                        .HasForeignKey("MealVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "User")
                        .WithMany("MealLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersion", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Meal", "Meal")
                        .WithMany("MealVersions")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", null)
                        .WithMany("MealVersionsCreated")
                        .HasForeignKey("UserId");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersionIngredient", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Ingredient", "Ingredient")
                        .WithMany("MealVersions")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.MealVersion", "MealVersion")
                        .WithMany("Ingredients")
                        .HasForeignKey("MealVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("MealVersion");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersionResearchReference", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.MealVersion", "MealVersion")
                        .WithMany("ResearchReferences")
                        .HasForeignKey("MealVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.ResearchReference", "ResearchReference")
                        .WithMany("MealVersionResearchReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealVersion");

                    b.Navigation("ResearchReference");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Notification", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.NotificationType", "NotificationType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Nutrient", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Unit", "Unit")
                        .WithMany("Nutrients")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ResearchReferenceAuthor", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Author", "Author")
                        .WithMany("ResearchReferenceAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.ResearchReference", "ResearchReference")
                        .WithMany("ResearchReferenceAuthors")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ResearchReference");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.User", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.ActivityLevel", "ActivityLevel")
                        .WithMany("Users")
                        .HasForeignKey("ActivityLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Goal", "Goal")
                        .WithMany("Users")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityLevel");

                    b.Navigation("Gender");

                    b.Navigation("Goal");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserConnection", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.User", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserDietaryPreference", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.DietaryPreference", "DietaryPreference")
                        .WithMany("UserDietaryPreferences")
                        .HasForeignKey("DietaryPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "User")
                        .WithMany("UserDietaryPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.UserMeal", b =>
                {
                    b.HasOne("ScienceBasedMealsApi.Models.Meal", "Meal")
                        .WithMany("SavedMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScienceBasedMealsApi.Models.User", "User")
                        .WithMany("SavedMeals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ActivityLevel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Author", b =>
                {
                    b.Navigation("ResearchReferenceAuthors");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.DietaryPreference", b =>
                {
                    b.Navigation("IngredientDietaryPreferences");

                    b.Navigation("UserDietaryPreferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Goal", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Ingredient", b =>
                {
                    b.Navigation("DietaryPreferences");

                    b.Navigation("MealVersions");

                    b.Navigation("Nutrients");

                    b.Navigation("ResearchReferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Meal", b =>
                {
                    b.Navigation("MealVersions");

                    b.Navigation("SavedMeals");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.MealVersion", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ResearchReferences");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Nutrient", b =>
                {
                    b.Navigation("IngredientNutrients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.ResearchReference", b =>
                {
                    b.Navigation("IngredientResearchReferences");

                    b.Navigation("MealVersionResearchReferences");

                    b.Navigation("ResearchReferenceAuthors");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.Unit", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Nutrients");
                });

            modelBuilder.Entity("ScienceBasedMealsApi.Models.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("MealApprovals");

                    b.Navigation("MealComments");

                    b.Navigation("MealLikes");

                    b.Navigation("MealVersionsCreated");

                    b.Navigation("Notifications");

                    b.Navigation("SavedMeals");

                    b.Navigation("UserDietaryPreferences");
                });
#pragma warning restore 612, 618
        }
    }
}
